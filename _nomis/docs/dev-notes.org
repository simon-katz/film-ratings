* Chris Howe-Jones's Clojure/Duct/CircleCI/Docker/AWS/Terrfaform tutorial
** The blogposts
*** [[https://circleci.com/blog/build-a-clojure-web-app-using-duct/][Build a Clojure web app using Duct]]
*** [[https://circleci.com/blog/package-a-clojure-web-application-using-docker/][Package a Clojure web application using Docker]]
*** [[https://circleci.com/blog/deploy-a-clojure-web-application-to-aws-using-terraform/][Deploy a Clojure web application to AWS using Terraform]]
** Notes
*** See the _nomis/scripts files
*** The app
**** Run migrations
***** (initially the app doesn't do migrations in production mode; I think that changes later in the tutorial)
export DB_HOST=localhost
export DB_PASSWORD=password
lein run :duct/migrator

-OR-

DB_HOST=localhost DB_PASSWORD=password lein run :duct/migrator
**** To run with lein
***** See "_nomis/scripts/run-app"
export DB_HOST=localhost
export DB_PASSWORD=password
lein run

-OR-

DB_HOST=localhost DB_PASSWORD=password lein run
**** To build and run an uberjar
lein uberjar
DB_HOST=localhost DB_PASSWORD=password java -jar target/film-ratings.jar
*** Docker
**** To run a Postgres Docker image
***** See "_nomis/scripts/run-db"
docker run -p 5432:5432 -e POSTGRES_USER=filmuser -e POSTGRES_DB=filmdb -e POSTGRES_PASSWORD=password postgres:alpine
**** To run psql with that DB
***** See "_nomis/scripts/run-psql"
psql -h localhost -p 5432 -U filmuser filmdb
**** To build the Docker image
docker build . -t film-ratings-app
**** To run the Docker image
***** v1
# The following only works on Linux
docker run --network host -e DB_HOST=localhost -e DB_PASSWORD=password film-ratings-app
***** v2
# The following attempt has no access to the DB
docker run -e DB_HOST=localhost -e DB_PASSWORD=password -p 3000:3000 film-ratings-app
***** So on macOS, it seems you have no way to run DB and app locally as separate containers
****** (But you can when you set up the docker-compose stuff)
**** Use docker-compose
DB_PASSWORD=password docker-compose build
DB_PASSWORD=password docker-compose up
**** Stop/quit the docker-compose up
***** C-c
C-c will stop the containers, and a subsequent `docker-compose up` will restart those same containers
***** docker-compose down
`docker-compose down` will stop and remove the containers
**** To access the DB within the docker-compose stuff
***** To access the DB using psql
rlwrap docker exec -i film-ratings_postgres_1 psql -U filmuser filmdb
    eg:
    > \d
    >                  List of relations
    >  Schema |        Name        |   Type   |  Owner
    > --------+--------------------+----------+----------
    >  public | film               | table    | filmuser
    >  public | film_id_seq        | sequence | filmuser
    >  public | ragtime_migrations | table    | filmuser
    > (3 rows)
    >
    > select * from film;
    >  id | name | description | rating
    > ----+------+-------------+--------
    >   1 | f1   | ff1         |      1
    >   2 | f2   | ff2         |      2
    >   3 | f3   | ff3         |      3
    > (3 rows)
***** To access the DB using a local tool (eg TablePlus):
****** NOT GOOD!
Add the following to docker-compose.yml:
    ports:            # NOT GOOD!
        - '5432:5432' # NOT GOOD!
****** TODO Ah, but I think we aren't going to use docker-compose in production
******* If docker-compose is only for dev machines, then maybe this is OK
**** Rebuild the Docker image and tag it with our Docker Hub repository id
docker build . -t simonkatz/film-ratings-app
**** Manually push image to Docker Hub
docker login
docker push simonkatz/film-ratings-app:latest
*** CircleCI
**** Setting up CircleCI to push to Docker Hub
***** Do it whenever we tag a version of our repository with x.y.z
*** Terraform
**** Words from the blog post
***** [[file:~/development-100/repositories/nomis/_learning/film-ratings-terraform/film-ratings-app-service.tf][film-ratings-app-service.tf]] and [[file:~/development-100/repositories/nomis/_learning/film-ratings-terraform/film-ratings-db-service.tf][film-ratings-db-service.tf]]
****** Two ECS tasks
******* film_ratings_app
******* film_ratings_db
****** These are going to run in ECS containers
******* two instances of the app
******* one of the DB
****** The app and DB tasks will each run inside their own services called
******* film_ratings_app_service
******* film_ratings_db_service
**** Commands
==== IN THE film-ratings-terraform DIRECTORY! ====
terraform init
terraform plan

NOT YET DONE:
terraform apply
** TODO Questions on return to this on 2020-06-03
*** Note that:
**** You have a docker image running on port 3000 -- it's there after reboots.
*** What do you call a docker running thing? (Is it just a running image?)
*** Exposing ports
**** How do you expose a port from an existing running docker image?
***** Did you find a way to do this?
***** Was there something different for Linux vs macOS
**** Did you decide against doing this? (security reasons)
**** Wasn't there some reason that you could use psl but not TablePlus?
***** Maybe something built in to the Docker image that lets you use psql?
** Notes on things wrong in the blog posts
*** Initial project creation
**** Changes to dependencies mean things don't work.
*** Something that only works on Linux
`docker run --network host ...`
*** A bit confusing on stopping docker images vs removing docker images
**** eg/ie `docker-compose down` and `C-c` aren't the same
***** `docker-compose down` removes images, `C-c` doesn't
*** DOCKERHUB_USER and DOCKERHUB_USERNAME
